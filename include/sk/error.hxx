/*
 * Copyright(c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license(the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third - parties to whom the Software is furnished to
 * do so, all subject to the following :
 *
 * The copyright notices in the Softwareand this entire statement, including
 * the above license grant, this restrictionand the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine - executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef SK_ERROR_HXX_INCLUDED
#define SK_ERROR_HXX_INCLUDED

#include <concepts>
#include <exception>
#include <memory>
#include <type_traits>

namespace sk {

    // clang-format off
	template<typename T>
	concept error_type = std::derived_from<T, std::exception>;
    // clang-format on

    /*
     * 'error' stores an std::exception as an error value which can be
     * returned and queried.
     */
    struct error {
        /*
         * Create an empty error that indicates success.
         */
        error() = default;

        /*
         * Create an error from an exception type.  The exception is copied
         * and stored inside the error object.
         */
        template <error_type Error>
        error(Error &&e)
            : exception_ptr(std::make_shared<std::remove_cv<Error>::type>(
                  std::forward<Error>(e))) {}

        error(error const &) = default;
        error(error &&) = default;
        error &operator=(error const &) = default;
        error &operator=(error &&) = default;

        // Return the error message.
        auto what() const -> char const * { return exception_ptr->what(); }

        // Return true if the error is empty (success), false if an error
        // condition is present.
        operator bool() const { return !exception_ptr.operator bool(); }

        // is<T>(): test if the stored error is or derives from T.
        template <error_type T> auto is() const -> bool {
            return get<T>() != nullptr;
        }

        // get<T>(): if is<T>(), return a pointer to the error,
        // otherwise return nullptr.
        template <error_type T> auto get() const -> T const * {
            if (!exception_ptr)
                return nullptr;
            return dynamic_cast<T const *>(exception_ptr.get());
        }

        // The exception object that we're holding.
        std::shared_ptr<std::exception> exception_ptr;
    };

} // namespace sk

#endif // SK_ERROR_HXX_INCLUDED

/*
 * Copyright(c) 2019, 2020, 2021 SiKol Ltd.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license(the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third - parties to whom the Software is furnished to
 * do so, all subject to the following :
 *
 * The copyright notices in the Softwareand this entire statement, including
 * the above license grant, this restrictionand the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine - executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#define CATCH_CONFIG_MAIN
#include <catch.hpp>

#include <cstring>
#include <stdexcept>
#include <string>

#include "sk/error.hxx"

sk::error return_runtime_error(std::string what) {
    return std::runtime_error(what);
}

sk::error return_success() {
    return sk::error();
}

TEST_CASE("sk::error returns an exception") {
    auto err = return_runtime_error("this is a test error");
    REQUIRE(!err);
    REQUIRE(std::strcmp(err.what(), "this is a test error") == 0);

    REQUIRE(err.is<std::exception>());
    REQUIRE(err.is<std::runtime_error>());
    REQUIRE(std::strcmp(err.get<std::runtime_error>()->what(),
                        "this is a test error") == 0);

    REQUIRE(!err.is<std::domain_error>());
    REQUIRE(err.get<std::domain_error>() == nullptr);
}

TEST_CASE("sk::error returns success") {
    auto err = return_success();
    REQUIRE(err);
    REQUIRE(!err.is<std::exception>());
    REQUIRE(err.get<std::exception>() == nullptr);
}